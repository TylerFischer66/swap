/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BasicSwapInterface extends utils.Interface {
  functions: {
    "balanceOf(address)": FunctionFragment;
    "factory()": FunctionFragment;
    "pairInfo(address,address)": FunctionFragment;
    "router()": FunctionFragment;
    "swap(address,uint256)": FunctionFragment;
    "tokenInfo(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tokenInfo", values: [string]): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pairInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenInfo", data: BytesLike): Result;

  events: {
    "aogAddress(address)": EventFragment;
    "log(string)": EventFragment;
    "logAddress(address)": EventFragment;
    "logNum(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "aogAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "logAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "logNum"): EventFragment;
}

export type aogAddressEvent = TypedEvent<[string], { oy: string }>;

export type aogAddressEventFilter = TypedEventFilter<aogAddressEvent>;

export type logEvent = TypedEvent<[string], { oy: string }>;

export type logEventFilter = TypedEventFilter<logEvent>;

export type logAddressEvent = TypedEvent<[string], { oy: string }>;

export type logAddressEventFilter = TypedEventFilter<logAddressEvent>;

export type logNumEvent = TypedEvent<[BigNumber], { oy: BigNumber }>;

export type logNumEventFilter = TypedEventFilter<logNumEvent>;

export interface BasicSwap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BasicSwapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    pairInfo(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        reserveA: BigNumber;
        reserveB: BigNumber;
        totalSupply: BigNumber;
      }
    >;

    router(overrides?: CallOverrides): Promise<[string]>;

    swap(
      tokenToBeSent: string,
      tokenToBeSentAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenInfo(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        name: string;
        symbol: string;
        allowance: BigNumber;
      }
    >;
  };

  balanceOf(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  factory(overrides?: CallOverrides): Promise<string>;

  pairInfo(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      reserveA: BigNumber;
      reserveB: BigNumber;
      totalSupply: BigNumber;
    }
  >;

  router(overrides?: CallOverrides): Promise<string>;

  swap(
    tokenToBeSent: string,
    tokenToBeSentAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenInfo(
    token: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      name: string;
      symbol: string;
      allowance: BigNumber;
    }
  >;

  callStatic: {
    balanceOf(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    pairInfo(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        reserveA: BigNumber;
        reserveB: BigNumber;
        totalSupply: BigNumber;
      }
    >;

    router(overrides?: CallOverrides): Promise<string>;

    swap(
      tokenToBeSent: string,
      tokenToBeSentAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenInfo(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        name: string;
        symbol: string;
        allowance: BigNumber;
      }
    >;
  };

  filters: {
    "aogAddress(address)"(oy?: null): aogAddressEventFilter;
    aogAddress(oy?: null): aogAddressEventFilter;

    "log(string)"(oy?: null): logEventFilter;
    log(oy?: null): logEventFilter;

    "logAddress(address)"(oy?: null): logAddressEventFilter;
    logAddress(oy?: null): logAddressEventFilter;

    "logNum(uint256)"(oy?: null): logNumEventFilter;
    logNum(oy?: null): logNumEventFilter;
  };

  estimateGas: {
    balanceOf(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    pairInfo(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      tokenToBeSent: string,
      tokenToBeSentAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenInfo(token: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairInfo(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(
      tokenToBeSent: string,
      tokenToBeSentAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenInfo(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
